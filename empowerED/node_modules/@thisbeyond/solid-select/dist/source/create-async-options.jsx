import { createSignal, createResource, getOwner, onCleanup } from "solid-js";
const createAsyncOptions = (fetcher, timeout = 250) => {
    const [inputValue, setInputValue] = createSignal("");
    const throttledFetcher = throttle(fetcher, timeout);
    const [asyncOptions] = createResource(inputValue, throttledFetcher, {
        initialValue: [],
    });
    return {
        get options() {
            return asyncOptions();
        },
        get loading() {
            return asyncOptions.loading;
        },
        onInput: setInputValue,
        readonly: false,
    };
};
const throttle = (callback, threshold) => {
    let activePromise = null, timeoutId, lastArgs;
    const wait = () => new Promise((resolve) => (timeoutId = setTimeout(resolve, threshold)));
    const throttled = (...args) => {
        lastArgs = args;
        if (activePromise)
            return activePromise;
        activePromise = wait().then(() => {
            activePromise = null;
            return callback(...lastArgs);
        });
        return activePromise;
    };
    const clear = () => {
        clearTimeout(timeoutId);
        activePromise = null;
    };
    if (getOwner())
        onCleanup(clear);
    return Object.assign(throttled, { clear });
};
export { createAsyncOptions };
