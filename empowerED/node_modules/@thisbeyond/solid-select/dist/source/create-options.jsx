import { fuzzyHighlight, fuzzySort } from "./fuzzy";
const createOptions = (values, userConfig) => {
    const config = Object.assign({
        filterable: true,
        disable: () => false,
    }, userConfig || {});
    const getLabel = (value) => config?.key !== undefined ? value[config.key] : value;
    const options = (inputValue) => {
        const initialValues = typeof values === "function" ? values(inputValue) : values;
        let createdOptions = initialValues.map((value) => {
            return {
                label: getLabel(value),
                value: value,
                disabled: config.disable(value),
            };
        });
        if (config.filterable && inputValue) {
            createdOptions = fuzzySort(inputValue, createdOptions, "label").map((result) => ({
                ...result.item,
                label: fuzzyHighlight(result),
            }));
        }
        if (config.createable !== undefined) {
            const trimmedValue = inputValue.trim();
            const exists = createdOptions.some((option) => areEqualIgnoringCase(inputValue, getLabel(option.value)));
            if (trimmedValue && !exists) {
                let value;
                if (typeof config.createable === "function") {
                    value = config.createable(trimmedValue);
                }
                else {
                    value = config.key ? { [config.key]: trimmedValue } : trimmedValue;
                }
                const option = {
                    label: (<>
              Create <mark>{getLabel(value)}</mark>
            </>),
                    value,
                    disabled: false,
                };
                createdOptions = [...createdOptions, option];
            }
        }
        return createdOptions;
    };
    const optionToValue = (option) => option.value;
    const format = (item, type) => type === "option" ? item.label : getLabel(item);
    const isOptionDisabled = (option) => option.disabled;
    return {
        options,
        optionToValue,
        isOptionDisabled,
        format,
    };
};
const areEqualIgnoringCase = (firstString, secondString) => firstString.localeCompare(secondString, undefined, {
    sensitivity: "base",
}) === 0;
export { createOptions };
