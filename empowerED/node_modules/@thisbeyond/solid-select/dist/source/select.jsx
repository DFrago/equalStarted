import { Show, For, splitProps, mergeProps, createEffect, on, createContext, useContext, } from "solid-js";
import { createSelect, } from "./create-select";
const SelectContext = createContext();
const useSelect = () => {
    const context = useContext(SelectContext);
    if (!context)
        throw new Error("No SelectContext found in ancestry.");
    return context;
};
const Select = (props) => {
    const [selectProps, local] = splitProps(mergeProps({
        format: ((data, type) => data),
        placeholder: "Select...",
        readonly: typeof props.options !== "function",
        loading: false,
        loadingPlaceholder: "Loading...",
        emptyPlaceholder: "No options",
    }, props), [
        "options",
        "optionToValue",
        "isOptionDisabled",
        "multiple",
        "disabled",
        "onInput",
        "onChange",
    ]);
    const select = createSelect(selectProps);
    createEffect(on(() => local.initialValue, (value) => value !== undefined && select.setValue(value)));
    return (<SelectContext.Provider value={select}>
      <Container class={local.class}>
        <Control id={local.id} name={local.name} format={local.format} placeholder={local.placeholder} autofocus={local.autofocus} readonly={local.readonly}/>
        <List loading={local.loading} loadingPlaceholder={local.loadingPlaceholder} emptyPlaceholder={local.emptyPlaceholder} format={local.format}/>
      </Container>
    </SelectContext.Provider>);
};
const Container = (props) => {
    const select = useSelect();
    return (<div class={`solid-select-container ${props.class !== undefined ? props.class : ""}`} data-disabled={select.disabled} onFocusIn={select.onFocusIn} onFocusOut={select.onFocusOut} onMouseDown={(event) => {
            select.onMouseDown(event);
            event.currentTarget.getElementsByTagName("input")[0].focus();
        }}>
      {props.children}
    </div>);
};
const Control = (props) => {
    const select = useSelect();
    const removeValue = (index) => {
        const value = select.value();
        select.setValue([...value.slice(0, index), ...value.slice(index + 1)]);
    };
    return (<div class="solid-select-control" data-multiple={select.multiple} data-has-value={select.hasValue()} data-disabled={select.disabled} onClick={select.onClick}>
      <Show when={!select.hasValue() && !select.hasInputValue()}>
        <Placeholder>{props.placeholder}</Placeholder>
      </Show>
      <Show when={select.hasValue() && !select.multiple && !select.hasInputValue()}>
        <SingleValue>{props.format(select.value(), "value")}</SingleValue>
      </Show>
      <Show when={select.hasValue() && select.multiple}>
        <For each={select.value()}>
          {(value, index) => (<MultiValue onRemove={() => removeValue(index())}>
              {props.format(value, "value")}
            </MultiValue>)}
        </For>
      </Show>
      <Input id={props.id} name={props.name} autofocus={props.autofocus} readonly={props.readonly}/>
    </div>);
};
const Placeholder = (props) => {
    return <div class="solid-select-placeholder">{props.children}</div>;
};
const SingleValue = (props) => {
    return <div class="solid-select-single-value">{props.children}</div>;
};
const MultiValue = (props) => {
    const select = useSelect();
    return (<div class="solid-select-multi-value">
      {props.children}
      <button type="button" class="solid-select-multi-value-remove" onClick={(event) => {
            event.stopPropagation();
            props.onRemove();
        }}>
        тип
      </button>
    </div>);
};
const Input = (props) => {
    const select = useSelect();
    return (<input id={props.id} name={props.name} class="solid-select-input" data-multiple={select.multiple} data-is-active={select.isActive()} type="text" tabIndex={0} autocomplete="off" autocapitalize="none" autofocus={props.autofocus} readonly={props.readonly} disabled={select.disabled} size={1} value={select.inputValue()} onInput={select.onInput} onKeyDown={(event) => {
            select.onKeyDown(event);
            if (!event.defaultPrevented) {
                if (event.key === "Escape") {
                    event.preventDefault();
                    event.stopPropagation();
                    event.target.blur();
                }
            }
        }} onMouseDown={(event) => {
            event.stopPropagation();
        }}/>);
};
const List = (props) => {
    const select = useSelect();
    return (<Show when={select.isOpen()}>
      <div class="solid-select-list">
        <Show when={!props.loading} fallback={<div class="solid-select-list-placeholder">
              {props.loadingPlaceholder}
            </div>}>
          <For each={select.options()} fallback={<div class="solid-select-list-placeholder">
                {props.emptyPlaceholder}
              </div>}>
            {(option) => (<Option option={option}>{props.format(option, "option")}</Option>)}
          </For>
        </Show>
      </div>
    </Show>);
};
const Option = (props) => {
    const select = useSelect();
    const scrollIntoViewOnFocus = (element) => {
        createEffect(() => {
            if (select.isOptionFocused(props.option)) {
                element.scrollIntoView({ block: "nearest" });
            }
        });
    };
    return (<div ref={scrollIntoViewOnFocus} data-disabled={select.isOptionDisabled(props.option)} data-focused={select.isOptionFocused(props.option)} class="solid-select-option" onClick={() => select.pickOption(props.option)}>
      {props.children}
    </div>);
};
export { Select, Container, Control, Placeholder, SingleValue, MultiValue, Input, List, Option, SelectContext, useSelect, };
