declare type Option = any;
declare type SingleValue = any;
declare type Value = SingleValue | SingleValue[];
interface CreateSelectProps {
    options: Option[] | ((inputValue: string) => Option[]);
    initialValue?: Value;
    multiple?: boolean;
    disabled?: boolean;
    optionToValue?: (option: Option) => SingleValue;
    isOptionDisabled?: (option: Option) => boolean;
    onChange?: (value: Value) => void;
    onInput?: (inputValue: string) => void;
}
declare const createSelect: (props: CreateSelectProps) => {
    options: import("solid-js").Accessor<any>;
    value: () => any;
    setValue: (value: Value) => any[];
    hasValue: () => boolean;
    clearValue: () => any[];
    inputValue: import("solid-js").Accessor<string>;
    setInputValue: import("solid-js").Setter<string>;
    hasInputValue: () => boolean;
    clearInputValue: () => "";
    isOpen: import("solid-js").Accessor<boolean>;
    setIsOpen: import("solid-js").Setter<boolean>;
    toggleOpen: () => boolean;
    isActive: import("solid-js").Accessor<boolean>;
    setIsActive: import("solid-js").Setter<boolean>;
    readonly multiple: boolean;
    readonly disabled: boolean;
    pickOption: (option: Option) => void;
    isOptionFocused: (option: Option) => boolean;
    isOptionDisabled: (option: Option) => boolean;
    onFocusIn: () => true;
    onFocusOut: () => void;
    onMouseDown: (event: Event) => void;
    onClick: (event: Event) => void;
    onInput: (event: Event) => void;
    onKeyDown: (event: KeyboardEvent) => void;
};
export { createSelect };
export type { CreateSelectProps, SingleValue, Value, Option };
