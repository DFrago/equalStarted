import { Component, ParentComponent } from "solid-js";
import { Option as OptionType, Value as ValueType, CreateSelectProps } from "./create-select";
interface CommonProps {
    format: (data: OptionType | ValueType, type: "option" | "value") => string | undefined;
    placeholder?: string;
    id?: string;
    name?: string;
    class?: string;
    autofocus?: boolean;
    readonly?: boolean;
    loading?: boolean;
    loadingPlaceholder?: string;
    emptyPlaceholder?: string;
}
declare type SelectProps = CreateSelectProps & Partial<CommonProps>;
declare const SelectContext: import("solid-js").Context<{
    options: import("solid-js").Accessor<any>;
    value: () => any;
    setValue: (value: any) => any[];
    hasValue: () => boolean;
    clearValue: () => any[];
    inputValue: import("solid-js").Accessor<string>;
    setInputValue: import("solid-js").Setter<string>;
    hasInputValue: () => boolean;
    clearInputValue: () => "";
    isOpen: import("solid-js").Accessor<boolean>;
    setIsOpen: import("solid-js").Setter<boolean>;
    toggleOpen: () => boolean;
    isActive: import("solid-js").Accessor<boolean>;
    setIsActive: import("solid-js").Setter<boolean>;
    readonly multiple: boolean;
    readonly disabled: boolean;
    pickOption: (option: any) => void;
    isOptionFocused: (option: any) => boolean;
    isOptionDisabled: (option: any) => boolean;
    onFocusIn: () => true;
    onFocusOut: () => void;
    onMouseDown: (event: Event) => void;
    onClick: (event: Event) => void;
    onInput: (event: Event) => void;
    onKeyDown: (event: KeyboardEvent) => void;
}>;
declare const useSelect: () => {
    options: import("solid-js").Accessor<any>;
    value: () => any;
    setValue: (value: any) => any[];
    hasValue: () => boolean;
    clearValue: () => any[];
    inputValue: import("solid-js").Accessor<string>;
    setInputValue: import("solid-js").Setter<string>;
    hasInputValue: () => boolean;
    clearInputValue: () => "";
    isOpen: import("solid-js").Accessor<boolean>;
    setIsOpen: import("solid-js").Setter<boolean>;
    toggleOpen: () => boolean;
    isActive: import("solid-js").Accessor<boolean>;
    setIsActive: import("solid-js").Setter<boolean>;
    readonly multiple: boolean;
    readonly disabled: boolean;
    pickOption: (option: any) => void;
    isOptionFocused: (option: any) => boolean;
    isOptionDisabled: (option: any) => boolean;
    onFocusIn: () => true;
    onFocusOut: () => void;
    onMouseDown: (event: Event) => void;
    onClick: (event: Event) => void;
    onInput: (event: Event) => void;
    onKeyDown: (event: KeyboardEvent) => void;
};
declare const Select: Component<SelectProps>;
declare type ContainerProps = Pick<CommonProps, "class">;
declare const Container: ParentComponent<ContainerProps>;
declare type ControlProps = Omit<CommonProps, "class">;
declare const Control: Component<ControlProps>;
declare type PlaceholderProps = Pick<CommonProps, "placeholder">;
declare const Placeholder: ParentComponent<PlaceholderProps>;
declare const SingleValue: ParentComponent<{}>;
declare const MultiValue: ParentComponent<{
    onRemove: () => void;
}>;
declare type InputProps = Pick<CommonProps, "id" | "name" | "autofocus" | "readonly">;
declare const Input: Component<InputProps>;
declare type ListProps = Pick<CommonProps, "loading" | "loadingPlaceholder" | "emptyPlaceholder" | "format">;
declare const List: Component<ListProps>;
declare type OptionProps = {
    option: OptionType;
};
declare const Option: ParentComponent<OptionProps>;
export { Select, Container, Control, Placeholder, SingleValue, MultiValue, Input, List, Option, SelectContext, useSelect, };
